swagger: '2.0'

# basic meta information
info:
  title: baby-nakadi
  version: '1.0'
  description: Very nice baby-nakadi

externalDocs:
  description: External docs
  url: https://github.bus.zalan.do/jyun/baby-nakadi

# technical configuration
basePath: /
produces:
- application/json
consumes:
- application/json

paths:

  '/':
    get:
      summary: Application root
      operationId: org.zalando.stups.friboo.system.http/redirect-to-swagger-ui
      responses:
        default:
          description: "Redirects to /ui/"

  '/hello/{name}':
    get:
      summary: Says hello
      description: |
        Says hello personally to {name}
      parameters:
        - $ref: '#/parameters/Hello-Name'
      tags:
        - General
      operationId: "net.zalando.baby-nakadi.api/get-hello"
      responses:
        200:
          description: Hello is said
        default:
          $ref: '#/responses/Error'          

  '/event-types':
    get:
      tags:
        - schema-registry-api
      operationId: "net.zalando.baby-nakadi.api-schema-registry/get-event-types"        
      description: Returns a list of all registered `EventType`s
      parameters:
        - name: X-Flow-Id
          in: header
          description: |
            The flow id of the request, which is written into the logs and passed to called services. Helpful
            for operational troubleshooting and log analysis.
          type: string
      responses:
        '200':
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/EventType'
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
    post:
      tags:
        - schema-registry-api
      operationId: "net.zalando.baby-nakadi.api-schema-registry/post-event-type"                
      description: |
        Creates a new `EventType`.

        The fields enrichment-strategies and partition-resolution-strategy
        have all an effect on the incoming Event of this EventType. For its impacts on the reception
        of events please consult the Event submission API methods.

        * Validation strategies define an array of validation stategies to be evaluated on reception
        of an `Event` of this `EventType`. Details of usage can be found in this external document

          - http://zalando.github.io/nakadi-manual/

        * Enrichment strategy. (todo: define this part of the API).

        * The schema of an `EventType` is defined as an `EventTypeSchema`. Currently only
        the value `json-schema` is supported, representing JSON Schema draft 04.

        Following conditions are enforced. Not meeting them will fail the request with the indicated
        status (details are provided in the Problem object):

        * EventType name on creation must be unique (or attempting to update an `EventType` with
          this method), otherwise the request is rejected with status 409 Conflict.

        * Using `EventTypeSchema.type` other than json-schema or passing a `EventTypeSchema.schema`
        that is invalid with respect to the schema's type. Rejects with 422 Unprocessable entity.

        * Referring any Enrichment or Partition strategies that do not exist or
        whose parametrization is deemed invalid. Rejects with 422 Unprocessable entity.

        Nakadi MIGHT impose necessary schema, validation and enrichment minimal configurations that
        MUST be followed by all EventTypes (examples include: validation rules to match the schema;
        enriching every Event with the reception date-type; adhering to a set of schema fields that
        are mandatory for all EventTypes). **The mechanism to set and inspect such rules is not
        defined at this time and might not be exposed in the API.**

      parameters:
        - name: event-type
          in: body
          description: EventType to be created
          schema:
            $ref: '#/definitions/EventType'
          required: true
      responses:
        '201':
          description: Created
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '409':
          description: Conflict, for example on creation of EventType with already existing name.
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'

  '/event-types/{name}':
    get:
      tags:
        - schema-registry-api
      operationId: "net.zalando.baby-nakadi.api-schema-registry/get-event-type"
      description: |
        Returns the `EventType` identified by its name.
      parameters:
        - name: name
          in: path
          description: Name of the EventType to load.
          type: string
          required: true
        - name: X-Flow-Id
          in: header
          description: |
            The flow id of the request, which is written into the logs and passed to called services. Helpful
            for operational troubleshooting and log analysis.
          type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/EventType'
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'

    put:
      tags:
        - schema-registry-api
      operationId: "net.zalando.baby-nakadi.api-schema-registry/update-event-type"
      description: |
        Updates the `EventType` identified by its name. Behaviour is the same as creation of
        `EventType` (See POST /event-type) except where noted below.

        The name field cannot be changed. Attempting to do so will result in a 422 failure.

        Modifications to the schema are constrained by the specified `compatibility_mode`.
      parameters:
        - name: name
          in: path
          description: Name of the EventType to update.
          type: string
          required: true
        - name: event-type
          in: body
          description: EventType to be updated.
          schema:
            $ref: '#/definitions/EventType'
          required: true
        - name: X-Flow-Id
          in: header
          description: |
            The flow id of the request, which is written into the logs and passed to called services. Helpful
            for operational troubleshooting and log analysis.
          type: string
      responses:
        '200':
          description: Ok
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
    delete:
      tags:
        - schema-registry-api
      operationId: "net.zalando.baby-nakadi.api-schema-registry/delete-event-type"        
      description: |
        Deletes an `EventType` identified by its name. All events in the `EventType`'s stream' will
        also be removed. **Note**: deletion happens asynchronously, which has the following
        consequences:

         * Creation of an equally named `EventType` before the underlying topic deletion is complete
         might not succeed (failure is a 409 Conflict).

         * Events in the stream may be visible for a short period of time before being removed.

      parameters:
        - name: name
          in: path
          description: Name of the EventType to delete.
          type: string
          required: true
        - name: X-Flow-Id
          in: header
          description: |
            The flow id of the request, which is written into the logs and passed to called services. Helpful
            for operational troubleshooting and log analysis.
          type: string
      responses:
        '200':
          description: EventType is successfuly removed
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'          
          
  '/subscriptions':
    get:
      summary: Get every subscriptions
      description: |
        Returns every subscriptions stored in mock server
      tags:
        - Subscription
      operationId: "net.zalando.baby-nakadi.api/list-subscription"
      responses:
        200:
          description: Ok
        default:
          $ref: '#/responses/Error'
    post:
      summary: Save new subscription
      description: |
        Saves new subscription which passed as request body
      tags:
        - Subscription
      operationId: "net.zalando.baby-nakadi.api/save-subscription"
      responses:
        201:
          description: Saved New
        200:
          description: Already have identical one, not updated
        400:
          description: Request with unknown fields
        422:
          description: Request without required fields
        default:
          $ref: '#/responses/Error'

parameters:
  Hello-Name:
    name: name
    in: path
    type: string
    description: Name of the person to greet

  EventTypeName:
    name: name
    in: path
    description: EventType name to get events about
    type: string
    required: true

    
responses:
  Error:
    description: An error occured.
    schema:
      $ref: '#/definitions/Error'

definitions:
  Error:
    type: object
    properties:
      message:
        type: string
    example:
      message: Internal Server Error

  Problem:
    type: object
    properties:
      type:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the problem type.  When dereferenced, it SHOULD provide
          human-readable API documentation for the problem type (e.g., using HTML).  This Problem
          object is the same as provided by https://github.com/zalando/problem
        example: http://httpstatus.es/503
      title:
        type: string
        description: |
          A short, summary of the problem type. Written in English and readable for engineers
          (usually not suited for non technical stakeholders and not localized)
        example: Service Unavailable
      status:
        type: integer
        format: int32
        description: |
          The HTTP status code generated by the origin server for this occurrence of the problem.
        example: 503
      detail:
        type: string
        description: |
          A human readable explanation specific to this occurrence of the problem.
        example: Connection to database timed out
      instance:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the specific occurrence of the problem.
          It may or may not yield further information if dereferenced.
    required:
      - type
      - title
      - status

  EventType:
    description: An event type defines the schema and its runtime properties.
    properties:
      name:
        type: string
        description: |
          Name of this EventType. The name is constrained by a regular expression.

          Note: the name can encode the owner/responsible for this EventType and ideally should
          follow a common pattern that makes it easy to read an understand, but this level of
          structure is not enforced. For example a team name and data type can be used such as
          'acme-team.price-change'.
        pattern: '[a-zA-Z][-0-9a-zA-Z_]*(\.[a-zA-Z][-0-9a-zA-Z_]*)*'
        example: order.order_cancelled, acme-platform.users
      owning_application:
        type: string
        description: |
          Indicator of the (Stups) Application owning this `EventType`.
        example: price-service
      category:
        type: string
        enum:
          - undefined
          - data
          - business
        description: |
          Defines the category of this EventType.

          The value set will influence, if not set otherwise, the default set of
          validations, enrichment-strategies, and the effective schema for validation in
          the following way:

          - `undefined`: No predefined changes apply. The effective schema for the validation is
            exactly the same as the `EventTypeSchema`.

          - `data`: Events of this category will be DataChangeEvents. The effective schema during
            the validation contains `metadata`, and adds fields `data_op` and `data_type`. The
            passed EventTypeSchema defines the schema of `data`.

          - `business`: Events of this category will be BusinessEvents. The effective schema for
            validation contains `metadata` and any additionally defined properties passed in the
            `EventTypeSchema` directly on top level of the Event. If name conflicts arise, creation
            of this EventType will be rejected.

      enrichment_strategies:
        description: |
          Determines the enrichment to be performed on an Event upon reception. Enrichment is
          performed once upon reception (and after validation) of an Event and is only possible on
          fields that are not defined on the incoming Event.

          For event types in categories 'business' or 'data' it's mandatory to use
          metadata_enrichment strategy. For 'undefined' event types it's not possible to use this
          strategy, since metadata field is not required.

          See documentation for the write operation for details on behaviour in case of unsuccessful
          enrichment.
        type: array
        items:
          type: string
          enum:
            - metadata_enrichment

      partition_strategy:
        description: |
          Determines how the assignment of the event to a partition should be handled.

          For details of possible values, see GET /registry/partition-strategies.
        type: string
        default: 'random'

      compatibility_mode:
        description: |
          Compatibility mode provides a mean for event owners to evolve their schema, given changes respect the
          semantics defined by this field.

          It's designed to be flexible enough so that producers can evolve their schemas while not
          inadvertently breaking existent consumers.

          Once defined, the compatibility mode is fixed, since otherwise it would break a predefined contract,
          declared by the producer.

          List of compatibility modes:

          - 'fixed': Schema changes are not allowed. This is used only by legacy event types. This option is not
            available for new event types. Schema validation is lenient and allow fields that are not defined. Also,
            it's possible to use the full json schema specification for defining schemas.

          - 'none': Any schema modification is accepted, even if it might break existing producers or consumers. When
            validating events, no additional properties are accepted unless explicitly stated in the schema.

          - 'compatible': Consumers can reliably parse events produced under different versions. Every event published
            since the first version is still valid based on the newest schema. When in compatible mode, it's allowed to
            add new optional properties and definitions to an existing schema, but no other changes are allowed.
            Under this mode, the following json-schema attributes are not supported: `not`, `patternProperties`,
            `additionalProperties` and `additionalItems`. When validating events, additional properties is `false`.
        type: string
        default: compatible

      schema:
        type: object
        $ref: '#/definitions/EventTypeSchema'
        description: |
          The most recent schema for this EventType. Submitted events will be validated against it.

      partition_key_fields:
        type: array
        items:
          type: string
        description: |
          Required when 'partition_resolution_strategy' is set to 'hash'. Must be absent otherwise.
          Indicates the fields used for evaluation the partition of Events of this type.

          If set it MUST be a valid required field as defined in the schema.

      default_statistic:
        type: object
        $ref: '#/definitions/EventTypeStatistics'
        description: |
          Defines expected load for this EventType. Nakadi uses this object in order to
          provide an optimal number of partitions from a throughput perspective.

      options:
        type: object
        $ref: '#/definitions/EventTypeOptions'
        description: |
          Provides ability to set internal Nakadi parameters.

      write_scopes:
        type: array
        items:
          type: string
        description: |
          This field is used for event publishing access control. Nakadi only authorises publishers whose session
          contains at least one of the scopes in this list.
          If no scopes provided then anyone can publish to this event type.

      read_scopes:
        type: array
        items:
          type: string
        description: |
          This field is used for event consuming access control. Nakadi only authorises consumers whose session
          contains at least one of the scopes in this list.
          If no scopes provided then anyone can consume from this event type.

      created_at:
        type: string
        pattern: date-time
        description: |
          Date and time when this event type was created.

      updated_at:
        type: string
        pattern: date-time
        description: |
          Date and time when this event type was last updated.

    required:
      - name
      - category
      - owning_application
      - schema

  EventTypeStatistics:
    type: object
    description: |
      Operational statistics for an EventType. This data MUST be provided by users on Event Type
      creation.

    properties:
      messages_per_minute:
        type: integer
        description: |
          Write rate for events of this EventType. This rate encompasses all producers of this
          EventType for a Nakadi cluster.

          Measured in event count per minute.

      message_size:
        type: integer
        description: |
          Average message size for each Event of this EventType. Includes in the count the whole serialized
          form of the event, including metadata.
          Measured in bytes.

      read_parallelism:
        type: integer
        description: |
          Amount of parallel readers (consumers) to this EventType.

      write_parallelism:
        type: integer
        description: |
          Amount of parallel writers (producers) to this EventType.
    required:
      - messages_per_minute
      - message_size
      - read_parallelism
      - write_parallelism

  EventTypeOptions:
    type: object
    description: |
      Additional parameters for tuning internal behavior of Nakadi.
    properties:
      retention_time:
        type: integer
        format: int64
        default: 345600000 # 4 days
        description: |
          Number of milliseconds that Nakadi stores events published to this event type.
      
  EventTypeSchema:
    properties:
      version:
        type: string
        readOnly: true
        description: |
          This field is automatically generated by Nakadi. Values are based on semantic versioning. Changes to `title`
          or `description` are considered PATCH level changes. Adding new optional fields is considered a MINOR level
          change. All other changes are considered MAJOR level.
        default: '1.0.0'
      created_at:
        type: string
        readOnly: true
        description: |
          Creation timestamp of the schema. This is generated by Nakadi. It should not be
          specified when updating a schema and sending it may result in a client error.
        format: date-time
        example: '1996-12-19T16:39:57-08:00'
      type:
        type: string
        enum:
          - json_schema
        description: |
          The type of schema definition. Currently only json_schema (JSON Schema v04) is supported, but in the
          future there could be others.
      schema:
        type: string
        description: |
          The schema as string in the syntax defined in the field type. Failure to respect the
          syntax will fail any operation on an EventType.
    required:
      - type
      - schema
